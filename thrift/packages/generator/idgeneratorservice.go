// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generator

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type IdGeneratorService interface {
	Ping() (r string, err error)
	// Parameters:
	//  - Params
	GetId(params *TGetIdParams) (r string, err error)
}

type IdGeneratorServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewIdGeneratorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IdGeneratorServiceClient {
	return &IdGeneratorServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewIdGeneratorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IdGeneratorServiceClient {
	return &IdGeneratorServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *IdGeneratorServiceClient) Ping() (r string, err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return p.recvPing()
}

func (p *IdGeneratorServiceClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("ping", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IdGeneratorServicePingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdGeneratorServiceClient) recvPing() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "ping failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "ping failed: invalid message type")
		return
	}
	result := IdGeneratorServicePingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.UnknownException != nil {
		err = result.UnknownException
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Params
func (p *IdGeneratorServiceClient) GetId(params *TGetIdParams) (r string, err error) {
	if err = p.sendGetId(params); err != nil {
		return
	}
	return p.recvGetId()
}

func (p *IdGeneratorServiceClient) sendGetId(params *TGetIdParams) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getId", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := IdGeneratorServiceGetIdArgs{
		Params: params,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *IdGeneratorServiceClient) recvGetId() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getId" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getId failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getId failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getId failed: invalid message type")
		return
	}
	result := IdGeneratorServiceGetIdResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.UserException != nil {
		err = result.UserException
		return
	} else if result.SystemException != nil {
		err = result.SystemException
		return
	} else if result.UnknownException != nil {
		err = result.UnknownException
		return
	}
	value = result.GetSuccess()
	return
}

type IdGeneratorServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      IdGeneratorService
}

func (p *IdGeneratorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *IdGeneratorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *IdGeneratorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewIdGeneratorServiceProcessor(handler IdGeneratorService) *IdGeneratorServiceProcessor {

	self4 := &IdGeneratorServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self4.processorMap["ping"] = &idGeneratorServiceProcessorPing{handler: handler}
	self4.processorMap["getId"] = &idGeneratorServiceProcessorGetId{handler: handler}
	return self4
}

func (p *IdGeneratorServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x5.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x5

}

type idGeneratorServiceProcessorPing struct {
	handler IdGeneratorService
}

func (p *idGeneratorServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IdGeneratorServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IdGeneratorServicePingResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Ping(); err2 != nil {
		switch v := err2.(type) {
		case *UserException:
			result.UserException = v
		case *SystemException:
			result.SystemException = v
		case *UnknownException:
			result.UnknownException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: "+err2.Error())
			oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type idGeneratorServiceProcessorGetId struct {
	handler IdGeneratorService
}

func (p *idGeneratorServiceProcessorGetId) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := IdGeneratorServiceGetIdArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := IdGeneratorServiceGetIdResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetId(args.Params); err2 != nil {
		switch v := err2.(type) {
		case *UserException:
			result.UserException = v
		case *SystemException:
			result.SystemException = v
		case *UnknownException:
			result.UnknownException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getId: "+err2.Error())
			oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("getId", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type IdGeneratorServicePingArgs struct {
}

func NewIdGeneratorServicePingArgs() *IdGeneratorServicePingArgs {
	return &IdGeneratorServicePingArgs{}
}

func (p *IdGeneratorServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGeneratorServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGeneratorServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGeneratorServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type IdGeneratorServicePingResult struct {
	Success          *string           `thrift:"success,0" json:"success,omitempty"`
	UserException    *UserException    `thrift:"user_exception,1" json:"user_exception,omitempty"`
	SystemException  *SystemException  `thrift:"system_exception,2" json:"system_exception,omitempty"`
	UnknownException *UnknownException `thrift:"unknown_exception,3" json:"unknown_exception,omitempty"`
}

func NewIdGeneratorServicePingResult() *IdGeneratorServicePingResult {
	return &IdGeneratorServicePingResult{}
}

var IdGeneratorServicePingResult_Success_DEFAULT string

func (p *IdGeneratorServicePingResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return IdGeneratorServicePingResult_Success_DEFAULT
	}
	return *p.Success
}

var IdGeneratorServicePingResult_UserException_DEFAULT *UserException

func (p *IdGeneratorServicePingResult) GetUserException() *UserException {
	if !p.IsSetUserException() {
		return IdGeneratorServicePingResult_UserException_DEFAULT
	}
	return p.UserException
}

var IdGeneratorServicePingResult_SystemException_DEFAULT *SystemException

func (p *IdGeneratorServicePingResult) GetSystemException() *SystemException {
	if !p.IsSetSystemException() {
		return IdGeneratorServicePingResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var IdGeneratorServicePingResult_UnknownException_DEFAULT *UnknownException

func (p *IdGeneratorServicePingResult) GetUnknownException() *UnknownException {
	if !p.IsSetUnknownException() {
		return IdGeneratorServicePingResult_UnknownException_DEFAULT
	}
	return p.UnknownException
}
func (p *IdGeneratorServicePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IdGeneratorServicePingResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *IdGeneratorServicePingResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *IdGeneratorServicePingResult) IsSetUnknownException() bool {
	return p.UnknownException != nil
}

func (p *IdGeneratorServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGeneratorServicePingResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IdGeneratorServicePingResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &UserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *IdGeneratorServicePingResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &SystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *IdGeneratorServicePingResult) readField3(iprot thrift.TProtocol) error {
	p.UnknownException = &UnknownException{}
	if err := p.UnknownException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
	}
	return nil
}

func (p *IdGeneratorServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGeneratorServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServicePingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServicePingResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServicePingResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnknownException() {
		if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err)
		}
		if err := p.UnknownException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGeneratorServicePingResult(%+v)", *p)
}

// Attributes:
//  - Params
type IdGeneratorServiceGetIdArgs struct {
	Params *TGetIdParams `thrift:"params,1" json:"params"`
}

func NewIdGeneratorServiceGetIdArgs() *IdGeneratorServiceGetIdArgs {
	return &IdGeneratorServiceGetIdArgs{}
}

var IdGeneratorServiceGetIdArgs_Params_DEFAULT *TGetIdParams

func (p *IdGeneratorServiceGetIdArgs) GetParams() *TGetIdParams {
	if !p.IsSetParams() {
		return IdGeneratorServiceGetIdArgs_Params_DEFAULT
	}
	return p.Params
}
func (p *IdGeneratorServiceGetIdArgs) IsSetParams() bool {
	return p.Params != nil
}

func (p *IdGeneratorServiceGetIdArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdArgs) readField1(iprot thrift.TProtocol) error {
	p.Params = &TGetIdParams{}
	if err := p.Params.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getId_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err)
	}
	if err := p.Params.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err)
	}
	return err
}

func (p *IdGeneratorServiceGetIdArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGeneratorServiceGetIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type IdGeneratorServiceGetIdResult struct {
	Success          *string           `thrift:"success,0" json:"success,omitempty"`
	UserException    *UserException    `thrift:"user_exception,1" json:"user_exception,omitempty"`
	SystemException  *SystemException  `thrift:"system_exception,2" json:"system_exception,omitempty"`
	UnknownException *UnknownException `thrift:"unknown_exception,3" json:"unknown_exception,omitempty"`
}

func NewIdGeneratorServiceGetIdResult() *IdGeneratorServiceGetIdResult {
	return &IdGeneratorServiceGetIdResult{}
}

var IdGeneratorServiceGetIdResult_Success_DEFAULT string

func (p *IdGeneratorServiceGetIdResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return IdGeneratorServiceGetIdResult_Success_DEFAULT
	}
	return *p.Success
}

var IdGeneratorServiceGetIdResult_UserException_DEFAULT *UserException

func (p *IdGeneratorServiceGetIdResult) GetUserException() *UserException {
	if !p.IsSetUserException() {
		return IdGeneratorServiceGetIdResult_UserException_DEFAULT
	}
	return p.UserException
}

var IdGeneratorServiceGetIdResult_SystemException_DEFAULT *SystemException

func (p *IdGeneratorServiceGetIdResult) GetSystemException() *SystemException {
	if !p.IsSetSystemException() {
		return IdGeneratorServiceGetIdResult_SystemException_DEFAULT
	}
	return p.SystemException
}

var IdGeneratorServiceGetIdResult_UnknownException_DEFAULT *UnknownException

func (p *IdGeneratorServiceGetIdResult) GetUnknownException() *UnknownException {
	if !p.IsSetUnknownException() {
		return IdGeneratorServiceGetIdResult_UnknownException_DEFAULT
	}
	return p.UnknownException
}
func (p *IdGeneratorServiceGetIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetUserException() bool {
	return p.UserException != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetSystemException() bool {
	return p.SystemException != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetUnknownException() bool {
	return p.UnknownException != nil
}

func (p *IdGeneratorServiceGetIdResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) readField1(iprot thrift.TProtocol) error {
	p.UserException = &UserException{}
	if err := p.UserException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) readField2(iprot thrift.TProtocol) error {
	p.SystemException = &SystemException{}
	if err := p.SystemException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) readField3(iprot thrift.TProtocol) error {
	p.UnknownException = &UnknownException{}
	if err := p.UnknownException.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getId_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IdGeneratorServiceGetIdResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServiceGetIdResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserException() {
		if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err)
		}
		if err := p.UserException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServiceGetIdResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemException() {
		if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err)
		}
		if err := p.SystemException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServiceGetIdResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnknownException() {
		if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err)
		}
		if err := p.UnknownException.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err)
		}
	}
	return err
}

func (p *IdGeneratorServiceGetIdResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IdGeneratorServiceGetIdResult(%+v)", *p)
}
