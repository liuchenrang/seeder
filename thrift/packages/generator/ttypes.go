// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generator

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_UNKNOWN_ERROR  ErrorCode = 0
	ErrorCode_TOO_BUSY_ERROR ErrorCode = 1
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_UNKNOWN_ERROR:
		return "ErrorCode_UNKNOWN_ERROR"
	case ErrorCode_TOO_BUSY_ERROR:
		return "ErrorCode_TOO_BUSY_ERROR"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "ErrorCode_UNKNOWN_ERROR":
		return ErrorCode_UNKNOWN_ERROR, nil
	case "ErrorCode_TOO_BUSY_ERROR":
		return ErrorCode_TOO_BUSY_ERROR, nil
	}
	return ErrorCode(math.MinInt32 - 1), fmt.Errorf("not a valid ErrorCode string")
}

type UserException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required"`
	ErrorName string    `thrift:"error_name,2,required"`
	Message   string    `thrift:"message,3"`
}

func NewUserException() *UserException {
	return &UserException{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *UserException) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *UserException) IsSetMessage() bool {
	return p.Message != ""
}

func (p *UserException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UserException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = ErrorCode(v)
	}
	return nil
}

func (p *UserException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *UserException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *UserException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UserException) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error_code: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.error_code (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error_code: %s", p, err)
		}
	}
	return err
}

func (p *UserException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return fmt.Errorf("%T.error_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_name: %s", p, err)
	}
	return err
}

func (p *UserException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:message: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Message)); err != nil {
			return fmt.Errorf("%T.message (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:message: %s", p, err)
		}
	}
	return err
}

func (p *UserException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserException(%+v)", *p)
}

type SystemException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required"`
	ErrorName string    `thrift:"error_name,2,required"`
	Message   string    `thrift:"message,3"`
}

func NewSystemException() *SystemException {
	return &SystemException{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *SystemException) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *SystemException) IsSetMessage() bool {
	return p.Message != ""
}

func (p *SystemException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SystemException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = ErrorCode(v)
	}
	return nil
}

func (p *SystemException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *SystemException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *SystemException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *SystemException) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error_code: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.error_code (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error_code: %s", p, err)
		}
	}
	return err
}

func (p *SystemException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return fmt.Errorf("%T.error_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_name: %s", p, err)
	}
	return err
}

func (p *SystemException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:message: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Message)); err != nil {
			return fmt.Errorf("%T.message (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:message: %s", p, err)
		}
	}
	return err
}

func (p *SystemException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemException(%+v)", *p)
}

type UnknownException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required"`
	ErrorName string    `thrift:"error_name,2,required"`
	Message   string    `thrift:"message,3,required"`
}

func NewUnknownException() *UnknownException {
	return &UnknownException{
		ErrorCode: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *UnknownException) IsSetErrorCode() bool {
	return int64(p.ErrorCode) != math.MinInt32-1
}

func (p *UnknownException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UnknownException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ErrorCode = ErrorCode(v)
	}
	return nil
}

func (p *UnknownException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *UnknownException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownException"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *UnknownException) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCode() {
		if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:error_code: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
			return fmt.Errorf("%T.error_code (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:error_code: %s", p, err)
		}
	}
	return err
}

func (p *UnknownException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return fmt.Errorf("%T.error_name (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_name: %s", p, err)
	}
	return err
}

func (p *UnknownException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:message: %s", p, err)
	}
	return err
}

func (p *UnknownException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownException(%+v)", *p)
}

type TGetIdParams struct {
	Tag           string `thrift:"tag,1,required"`
	GeneratorType int32  `thrift:"generator_type,2,required"`
}

func NewTGetIdParams() *TGetIdParams {
	return &TGetIdParams{}
}

func (p *TGetIdParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TGetIdParams) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Tag = v
	}
	return nil
}

func (p *TGetIdParams) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.GeneratorType = v
	}
	return nil
}

func (p *TGetIdParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGetIdParams"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TGetIdParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:tag: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Tag)); err != nil {
		return fmt.Errorf("%T.tag (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:tag: %s", p, err)
	}
	return err
}

func (p *TGetIdParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("generator_type", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:generator_type: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.GeneratorType)); err != nil {
		return fmt.Errorf("%T.generator_type (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:generator_type: %s", p, err)
	}
	return err
}

func (p *TGetIdParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetIdParams(%+v)", *p)
}
