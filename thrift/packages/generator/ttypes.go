// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generator

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type ErrorCode int64

const (
	ErrorCode_UNKNOWN_ERROR  ErrorCode = 0
	ErrorCode_TOO_BUSY_ERROR ErrorCode = 1
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_UNKNOWN_ERROR:
		return "UNKNOWN_ERROR"
	case ErrorCode_TOO_BUSY_ERROR:
		return "TOO_BUSY_ERROR"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "UNKNOWN_ERROR":
		return ErrorCode_UNKNOWN_ERROR, nil
	case "TOO_BUSY_ERROR":
		return ErrorCode_TOO_BUSY_ERROR, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
	q, err := ErrorCodeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type UserException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required" json:"error_code"`
	ErrorName string    `thrift:"error_name,2,required" json:"error_name"`
	Message   *string   `thrift:"message,3" json:"message,omitempty"`
}

func NewUserException() *UserException {
	return &UserException{}
}

func (p *UserException) GetErrorCode() ErrorCode {
	return p.ErrorCode
}

func (p *UserException) GetErrorName() string {
	return p.ErrorName
}

var UserException_Message_DEFAULT string

func (p *UserException) GetMessage() string {
	if !p.IsSetMessage() {
		return UserException_Message_DEFAULT
	}
	return *p.Message
}
func (p *UserException) IsSetMessage() bool {
	return p.Message != nil
}

func (p *UserException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetErrorCode bool = false
	var issetErrorName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetErrorCode = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetErrorName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetErrorCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"))
	}
	if !issetErrorName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"))
	}
	return nil
}

func (p *UserException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *UserException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *UserException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *UserException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UserException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UserException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err)
	}
	return err
}

func (p *UserException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err)
	}
	return err
}

func (p *UserException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *UserException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserException(%+v)", *p)
}

func (p *UserException) Error() string {
	return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type SystemException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required" json:"error_code"`
	ErrorName string    `thrift:"error_name,2,required" json:"error_name"`
	Message   *string   `thrift:"message,3" json:"message,omitempty"`
}

func NewSystemException() *SystemException {
	return &SystemException{}
}

func (p *SystemException) GetErrorCode() ErrorCode {
	return p.ErrorCode
}

func (p *SystemException) GetErrorName() string {
	return p.ErrorName
}

var SystemException_Message_DEFAULT string

func (p *SystemException) GetMessage() string {
	if !p.IsSetMessage() {
		return SystemException_Message_DEFAULT
	}
	return *p.Message
}
func (p *SystemException) IsSetMessage() bool {
	return p.Message != nil
}

func (p *SystemException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetErrorCode bool = false
	var issetErrorName bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetErrorCode = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetErrorName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetErrorCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"))
	}
	if !issetErrorName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"))
	}
	return nil
}

func (p *SystemException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *SystemException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *SystemException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *SystemException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SystemException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *SystemException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err)
	}
	return err
}

func (p *SystemException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err)
	}
	return err
}

func (p *SystemException) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
		}
	}
	return err
}

func (p *SystemException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SystemException(%+v)", *p)
}

func (p *SystemException) Error() string {
	return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type UnknownException struct {
	ErrorCode ErrorCode `thrift:"error_code,1,required" json:"error_code"`
	ErrorName string    `thrift:"error_name,2,required" json:"error_name"`
	Message   string    `thrift:"message,3,required" json:"message"`
}

func NewUnknownException() *UnknownException {
	return &UnknownException{}
}

func (p *UnknownException) GetErrorCode() ErrorCode {
	return p.ErrorCode
}

func (p *UnknownException) GetErrorName() string {
	return p.ErrorName
}

func (p *UnknownException) GetMessage() string {
	return p.Message
}
func (p *UnknownException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetErrorCode bool = false
	var issetErrorName bool = false
	var issetMessage bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetErrorCode = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetErrorName = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetMessage = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetErrorCode {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"))
	}
	if !issetErrorName {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"))
	}
	if !issetMessage {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"))
	}
	return nil
}

func (p *UnknownException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := ErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *UnknownException) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ErrorName = v
	}
	return nil
}

func (p *UnknownException) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Message = v
	}
	return nil
}

func (p *UnknownException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnknownException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err)
	}
	return err
}

func (p *UnknownException) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err)
	}
	if err := oprot.WriteString(string(p.ErrorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err)
	}
	return err
}

func (p *UnknownException) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err)
	}
	return err
}

func (p *UnknownException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownException(%+v)", *p)
}

func (p *UnknownException) Error() string {
	return p.String()
}

// Attributes:
//  - Tag
//  - GeneratorType
type TGetIdParams struct {
	Tag           string `thrift:"tag,1,required" json:"tag"`
	GeneratorType int32  `thrift:"generator_type,2,required" json:"generator_type"`
}

func NewTGetIdParams() *TGetIdParams {
	return &TGetIdParams{}
}

func (p *TGetIdParams) GetTag() string {
	return p.Tag
}

func (p *TGetIdParams) GetGeneratorType() int32 {
	return p.GeneratorType
}
func (p *TGetIdParams) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTag bool = false
	var issetGeneratorType bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTag = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetGeneratorType = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTag {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tag is not set"))
	}
	if !issetGeneratorType {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GeneratorType is not set"))
	}
	return nil
}

func (p *TGetIdParams) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Tag = v
	}
	return nil
}

func (p *TGetIdParams) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.GeneratorType = v
	}
	return nil
}

func (p *TGetIdParams) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TGetIdParams"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TGetIdParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tag", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tag)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tag (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err)
	}
	return err
}

func (p *TGetIdParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("generator_type", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:generator_type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.GeneratorType)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.generator_type (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:generator_type: ", p), err)
	}
	return err
}

func (p *TGetIdParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TGetIdParams(%+v)", *p)
}
