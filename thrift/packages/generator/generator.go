// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package generator

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type ErrorCode int64
const (
  ErrorCode_UNKNOWN_ERROR ErrorCode = 0
  ErrorCode_TOO_BUSY_ERROR ErrorCode = 1
)

func (p ErrorCode) String() string {
  switch p {
  case ErrorCode_UNKNOWN_ERROR: return "UNKNOWN_ERROR"
  case ErrorCode_TOO_BUSY_ERROR: return "TOO_BUSY_ERROR"
  }
  return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
  switch s {
  case "UNKNOWN_ERROR": return ErrorCode_UNKNOWN_ERROR, nil 
  case "TOO_BUSY_ERROR": return ErrorCode_TOO_BUSY_ERROR, nil 
  }
  return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}


func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }

func (p ErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *ErrorCode) UnmarshalText(text []byte) error {
q, err := ErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *ErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = ErrorCode(v)
return nil
}

func (p * ErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type UserException struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewUserException() *UserException {
  return &UserException{}
}


func (p *UserException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *UserException) GetErrorName() string {
  return p.ErrorName
}
var UserException_Message_DEFAULT string
func (p *UserException) GetMessage() string {
  if !p.IsSetMessage() {
    return UserException_Message_DEFAULT
  }
return *p.Message
}
func (p *UserException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *UserException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *UserException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *UserException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *UserException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *UserException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UserException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UserException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *UserException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *UserException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *UserException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UserException(%+v)", *p)
}

func (p *UserException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type SystemException struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewSystemException() *SystemException {
  return &SystemException{}
}


func (p *SystemException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *SystemException) GetErrorName() string {
  return p.ErrorName
}
var SystemException_Message_DEFAULT string
func (p *SystemException) GetMessage() string {
  if !p.IsSetMessage() {
    return SystemException_Message_DEFAULT
  }
return *p.Message
}
func (p *SystemException) IsSetMessage() bool {
  return p.Message != nil
}

func (p *SystemException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  return nil
}

func (p *SystemException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *SystemException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *SystemException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *SystemException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SystemException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SystemException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *SystemException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *SystemException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *SystemException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SystemException(%+v)", *p)
}

func (p *SystemException) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - ErrorName
//  - Message
type UnknownException struct {
  ErrorCode ErrorCode `thrift:"error_code,1,required" db:"error_code" json:"error_code"`
  ErrorName string `thrift:"error_name,2,required" db:"error_name" json:"error_name"`
  Message string `thrift:"message,3,required" db:"message" json:"message"`
}

func NewUnknownException() *UnknownException {
  return &UnknownException{}
}


func (p *UnknownException) GetErrorCode() ErrorCode {
  return p.ErrorCode
}

func (p *UnknownException) GetErrorName() string {
  return p.ErrorName
}

func (p *UnknownException) GetMessage() string {
  return p.Message
}
func (p *UnknownException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;
  var issetErrorName bool = false;
  var issetMessage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorCode = true
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetErrorName = true
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetMessage = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  if !issetErrorName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorName is not set"));
  }
  if !issetMessage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Message is not set"));
  }
  return nil
}

func (p *UnknownException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := ErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *UnknownException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ErrorName = v
}
  return nil
}

func (p *UnknownException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *UnknownException) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("UnknownException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *UnknownException) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *UnknownException) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error_name: ", p), err) }
  if err := oprot.WriteString(string(p.ErrorName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error_name: ", p), err) }
  return err
}

func (p *UnknownException) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  return err
}

func (p *UnknownException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("UnknownException(%+v)", *p)
}

func (p *UnknownException) Error() string {
  return p.String()
}

// Attributes:
//  - Tag
//  - GeneratorType
type TGetIdParams struct {
  Tag string `thrift:"tag,1,required" db:"tag" json:"tag"`
  GeneratorType int32 `thrift:"generator_type,2,required" db:"generator_type" json:"generator_type"`
}

func NewTGetIdParams() *TGetIdParams {
  return &TGetIdParams{}
}


func (p *TGetIdParams) GetTag() string {
  return p.Tag
}

func (p *TGetIdParams) GetGeneratorType() int32 {
  return p.GeneratorType
}
func (p *TGetIdParams) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTag bool = false;
  var issetGeneratorType bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetTag = true
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
      issetGeneratorType = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTag{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tag is not set"));
  }
  if !issetGeneratorType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field GeneratorType is not set"));
  }
  return nil
}

func (p *TGetIdParams)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Tag = v
}
  return nil
}

func (p *TGetIdParams)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GeneratorType = v
}
  return nil
}

func (p *TGetIdParams) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TGetIdParams"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TGetIdParams) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("tag", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tag: ", p), err) }
  if err := oprot.WriteString(string(p.Tag)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tag (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tag: ", p), err) }
  return err
}

func (p *TGetIdParams) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("generator_type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:generator_type: ", p), err) }
  if err := oprot.WriteI32(int32(p.GeneratorType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.generator_type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:generator_type: ", p), err) }
  return err
}

func (p *TGetIdParams) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TGetIdParams(%+v)", *p)
}

type IdGeneratorService interface {
  Ping(ctx context.Context) (r string, err error)
  // Parameters:
  //  - Params
  GetId(ctx context.Context, params *TGetIdParams) (r string, err error)
}

type IdGeneratorServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewIdGeneratorService instead
func NewIdGeneratorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IdGeneratorServiceClient {
  return &IdGeneratorServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewIdGeneratorService instead
func NewIdGeneratorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IdGeneratorServiceClient {
  return &IdGeneratorServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIdGeneratorServiceClient(c thrift.TClient) *IdGeneratorServiceClient {
  return &IdGeneratorServiceClient{
    c: c,
  }
}

func (p *IdGeneratorServiceClient) Ping(ctx context.Context) (r string, err error) {
  var _args0 IdGeneratorServicePingArgs
  var _result1 IdGeneratorServicePingResult
  if err = p.c.Call(ctx, "ping", &_args0, &_result1); err != nil {
    return
  }
  switch {
  case _result1.UserException!= nil:
    return r, _result1.UserException
  case _result1.SystemException!= nil:
    return r, _result1.SystemException
  case _result1.UnknownException!= nil:
    return r, _result1.UnknownException
  }

  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Params
func (p *IdGeneratorServiceClient) GetId(ctx context.Context, params *TGetIdParams) (r string, err error) {
  var _args2 IdGeneratorServiceGetIdArgs
  _args2.Params = params
  var _result3 IdGeneratorServiceGetIdResult
  if err = p.c.Call(ctx, "getId", &_args2, &_result3); err != nil {
    return
  }
  switch {
  case _result3.UserException!= nil:
    return r, _result3.UserException
  case _result3.SystemException!= nil:
    return r, _result3.SystemException
  case _result3.UnknownException!= nil:
    return r, _result3.UnknownException
  }

  return _result3.GetSuccess(), nil
}

type IdGeneratorServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IdGeneratorService
}

func (p *IdGeneratorServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IdGeneratorServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IdGeneratorServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIdGeneratorServiceProcessor(handler IdGeneratorService) *IdGeneratorServiceProcessor {

  self4 := &IdGeneratorServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["ping"] = &idGeneratorServiceProcessorPing{handler:handler}
  self4.processorMap["getId"] = &idGeneratorServiceProcessorGetId{handler:handler}
return self4
}

func (p *IdGeneratorServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x5

}

type idGeneratorServiceProcessorPing struct {
  handler IdGeneratorService
}

func (p *idGeneratorServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IdGeneratorServicePingArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IdGeneratorServicePingResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.Ping(ctx); err2 != nil {
  switch v := err2.(type) {
    case *UserException:
  result.UserException = v
    case *SystemException:
  result.SystemException = v
    case *UnknownException:
  result.UnknownException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ping: " + err2.Error())
    oprot.WriteMessageBegin("ping", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("ping", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type idGeneratorServiceProcessorGetId struct {
  handler IdGeneratorService
}

func (p *idGeneratorServiceProcessorGetId) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := IdGeneratorServiceGetIdArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := IdGeneratorServiceGetIdResult{}
var retval string
  var err2 error
  if retval, err2 = p.handler.GetId(ctx, args.Params); err2 != nil {
  switch v := err2.(type) {
    case *UserException:
  result.UserException = v
    case *SystemException:
  result.SystemException = v
    case *UnknownException:
  result.UnknownException = v
    default:
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getId: " + err2.Error())
    oprot.WriteMessageBegin("getId", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  }
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getId", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

type IdGeneratorServicePingArgs struct {
}

func NewIdGeneratorServicePingArgs() *IdGeneratorServicePingArgs {
  return &IdGeneratorServicePingArgs{}
}

func (p *IdGeneratorServicePingArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdGeneratorServicePingArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdGeneratorServicePingArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdGeneratorServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type IdGeneratorServicePingResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  UserException *UserException `thrift:"user_exception,1" db:"user_exception" json:"user_exception,omitempty"`
  SystemException *SystemException `thrift:"system_exception,2" db:"system_exception" json:"system_exception,omitempty"`
  UnknownException *UnknownException `thrift:"unknown_exception,3" db:"unknown_exception" json:"unknown_exception,omitempty"`
}

func NewIdGeneratorServicePingResult() *IdGeneratorServicePingResult {
  return &IdGeneratorServicePingResult{}
}

var IdGeneratorServicePingResult_Success_DEFAULT string
func (p *IdGeneratorServicePingResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IdGeneratorServicePingResult_Success_DEFAULT
  }
return *p.Success
}
var IdGeneratorServicePingResult_UserException_DEFAULT *UserException
func (p *IdGeneratorServicePingResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IdGeneratorServicePingResult_UserException_DEFAULT
  }
return p.UserException
}
var IdGeneratorServicePingResult_SystemException_DEFAULT *SystemException
func (p *IdGeneratorServicePingResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return IdGeneratorServicePingResult_SystemException_DEFAULT
  }
return p.SystemException
}
var IdGeneratorServicePingResult_UnknownException_DEFAULT *UnknownException
func (p *IdGeneratorServicePingResult) GetUnknownException() *UnknownException {
  if !p.IsSetUnknownException() {
    return IdGeneratorServicePingResult_UnknownException_DEFAULT
  }
return p.UnknownException
}
func (p *IdGeneratorServicePingResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IdGeneratorServicePingResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IdGeneratorServicePingResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *IdGeneratorServicePingResult) IsSetUnknownException() bool {
  return p.UnknownException != nil
}

func (p *IdGeneratorServicePingResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdGeneratorServicePingResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IdGeneratorServicePingResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IdGeneratorServicePingResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *IdGeneratorServicePingResult)  ReadField3(iprot thrift.TProtocol) error {
  p.UnknownException = &UnknownException{}
  if err := p.UnknownException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
  }
  return nil
}

func (p *IdGeneratorServicePingResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ping_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdGeneratorServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServicePingResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServicePingResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServicePingResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownException() {
    if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err) }
    if err := p.UnknownException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServicePingResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdGeneratorServicePingResult(%+v)", *p)
}

// Attributes:
//  - Params
type IdGeneratorServiceGetIdArgs struct {
  Params *TGetIdParams `thrift:"params,1" db:"params" json:"params"`
}

func NewIdGeneratorServiceGetIdArgs() *IdGeneratorServiceGetIdArgs {
  return &IdGeneratorServiceGetIdArgs{}
}

var IdGeneratorServiceGetIdArgs_Params_DEFAULT *TGetIdParams
func (p *IdGeneratorServiceGetIdArgs) GetParams() *TGetIdParams {
  if !p.IsSetParams() {
    return IdGeneratorServiceGetIdArgs_Params_DEFAULT
  }
return p.Params
}
func (p *IdGeneratorServiceGetIdArgs) IsSetParams() bool {
  return p.Params != nil
}

func (p *IdGeneratorServiceGetIdArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Params = &TGetIdParams{}
  if err := p.Params.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Params), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getId_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdGeneratorServiceGetIdArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("params", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:params: ", p), err) }
  if err := p.Params.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Params), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:params: ", p), err) }
  return err
}

func (p *IdGeneratorServiceGetIdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdGeneratorServiceGetIdArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - UserException
//  - SystemException
//  - UnknownException
type IdGeneratorServiceGetIdResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  UserException *UserException `thrift:"user_exception,1" db:"user_exception" json:"user_exception,omitempty"`
  SystemException *SystemException `thrift:"system_exception,2" db:"system_exception" json:"system_exception,omitempty"`
  UnknownException *UnknownException `thrift:"unknown_exception,3" db:"unknown_exception" json:"unknown_exception,omitempty"`
}

func NewIdGeneratorServiceGetIdResult() *IdGeneratorServiceGetIdResult {
  return &IdGeneratorServiceGetIdResult{}
}

var IdGeneratorServiceGetIdResult_Success_DEFAULT string
func (p *IdGeneratorServiceGetIdResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return IdGeneratorServiceGetIdResult_Success_DEFAULT
  }
return *p.Success
}
var IdGeneratorServiceGetIdResult_UserException_DEFAULT *UserException
func (p *IdGeneratorServiceGetIdResult) GetUserException() *UserException {
  if !p.IsSetUserException() {
    return IdGeneratorServiceGetIdResult_UserException_DEFAULT
  }
return p.UserException
}
var IdGeneratorServiceGetIdResult_SystemException_DEFAULT *SystemException
func (p *IdGeneratorServiceGetIdResult) GetSystemException() *SystemException {
  if !p.IsSetSystemException() {
    return IdGeneratorServiceGetIdResult_SystemException_DEFAULT
  }
return p.SystemException
}
var IdGeneratorServiceGetIdResult_UnknownException_DEFAULT *UnknownException
func (p *IdGeneratorServiceGetIdResult) GetUnknownException() *UnknownException {
  if !p.IsSetUnknownException() {
    return IdGeneratorServiceGetIdResult_UnknownException_DEFAULT
  }
return p.UnknownException
}
func (p *IdGeneratorServiceGetIdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetUserException() bool {
  return p.UserException != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetSystemException() bool {
  return p.SystemException != nil
}

func (p *IdGeneratorServiceGetIdResult) IsSetUnknownException() bool {
  return p.UnknownException != nil
}

func (p *IdGeneratorServiceGetIdResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *IdGeneratorServiceGetIdResult)  ReadField1(iprot thrift.TProtocol) error {
  p.UserException = &UserException{}
  if err := p.UserException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UserException), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdResult)  ReadField2(iprot thrift.TProtocol) error {
  p.SystemException = &SystemException{}
  if err := p.SystemException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SystemException), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdResult)  ReadField3(iprot thrift.TProtocol) error {
  p.UnknownException = &UnknownException{}
  if err := p.UnknownException.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnknownException), err)
  }
  return nil
}

func (p *IdGeneratorServiceGetIdResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getId_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IdGeneratorServiceGetIdResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServiceGetIdResult) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetUserException() {
    if err := oprot.WriteFieldBegin("user_exception", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user_exception: ", p), err) }
    if err := p.UserException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UserException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServiceGetIdResult) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemException() {
    if err := oprot.WriteFieldBegin("system_exception", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:system_exception: ", p), err) }
    if err := p.SystemException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SystemException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:system_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServiceGetIdResult) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetUnknownException() {
    if err := oprot.WriteFieldBegin("unknown_exception", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:unknown_exception: ", p), err) }
    if err := p.UnknownException.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnknownException), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:unknown_exception: ", p), err) }
  }
  return err
}

func (p *IdGeneratorServiceGetIdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IdGeneratorServiceGetIdResult(%+v)", *p)
}


